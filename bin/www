#!/usr/bin/env node

const app = require('../app'); // Import the main app file
const http = require('http');
const mysql = require('mysql2'); // Import the MySQL package

// Set up the MySQL connection
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'your_mysql_user',
  password: 'your_mysql_password',
  database: 'your_database_name'
});

// Connect to the MySQL database
connection.connect((error) => {
  if (error) {
    console.error('Failed to connect to MySQL:', error);
    return;
  }
  console.log('Connected to MySQL database');
});

// Set the MySQL connection in the app for later use
app.set('mysqlConnection', connection);

// Create the server
const server = http.createServer(app);

// Set the server port
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Start the server
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize the port to a valid number or string
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

// Handle server errors
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Log server listening on the specified port
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('Server listening on ' + bind);
}